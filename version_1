!pip install torch-geometric "ray[tune]" wandb kafka-python python-dotenv
import os
import ray
import torch
import numpy as np
import pandas as pd
import torch.nn as nn
import matplotlib.pyplot as plt
import torch.nn.functional as F
import torch.optim as optim
from ray import tune
from ray.air import RunConfig
import wandb
from ray.air.integrations.wandb import WandbLoggerCallback
from torch_geometric.nn import GATv2Conv
from sklearn.metrics import f1_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from xgboost import XGBClassifier

# 數據預處理
def load_data_partition(shard_id):
    df = pd.read_csv("chunk_1.csv")
    df.replace([np.inf, -np.inf], np.nan, inplace=True)
    df.fillna(df.median(numeric_only=True), inplace=True)
    X = df[[col for col in df.columns if col != 'target' and pd.api.types.is_numeric_dtype(df[col])]].astype(np.float32)
    y = df['target'].astype(int) if 'target' in df.columns else np.random.randint(0, 2, size=(len(X),))
    scaler = StandardScaler()
    X_scaled = torch.tensor(scaler.fit_transform(X), dtype=torch.float32)
    y = torch.tensor(y)
    return X_scaled, y

# 設計actor網路
class SpatioTemporalActor(nn.Module):
    def __init__(self, time_dim, space_dim):
        super().__init__()
        self.lstm = nn.LSTM(input_size=time_dim, hidden_size=64, batch_first=True)
        self.gat = GATv2Conv(space_dim, 64, heads=1)
        self.fc = nn.Linear(64, time_dim)

    def forward(self, x):
        lstm_out, _ = self.lstm(x.unsqueeze(1))
        lstm_feat = lstm_out[:, -1, :]
        edge_index = torch.tensor([[i for i in range(x.shape[0])], [i for i in range(x.shape[0])]])
        gat_feat = self.gat(x, edge_index)
        fused = lstm_feat + gat_feat
        return torch.sigmoid(self.fc(fused))

# PPO損失函數
def ppo_loss(old_probs, new_probs, rewards):
    ratio = (new_probs + 1e-8) / (old_probs + 1e-8)
    return -torch.mean(torch.clamp(ratio, 0.8, 1.2) * rewards)

# Gumbel-Softmax函數(硬採樣)
def gumbel_softmax(logits, tau=1.0, hard=False):
    gumbels = -torch.empty_like(logits).exponential_().log()
    y = (logits + gumbels) / tau
    return F.softmax(y, dim=-1)

# XGBoost預測
def xgb_predict(features, y):
    xgb = XGBClassifier()
    xgb.fit(features.detach().cpu().numpy(), y.cpu().numpy())
    preds = xgb.predict(features.detach().cpu().numpy())
    return torch.tensor(preds)

# 獎勵函數
def compute_reward(predictions, labels):
    return f1_score(labels.cpu().numpy(), predictions.cpu().numpy(), average='macro')

# 訓練函數
def train(actor_net, X, y, epochs=10):
    optimizer = optim.Adam(actor_net.parameters(), lr=1e-3)
    scaler = torch.cuda.amp.GradScaler()
    old_probs = torch.ones(X.shape[0],X.shape[1])
    all_rewards = []
    final_preds = None

    for epoch in range(epochs):
        actor_net.train()
        with torch.cuda.amp.autocast():
            probs = actor_net(X)
            selected = X * (probs > 0.5).float()
            preds = xgb_predict(selected, y)
            reward = compute_reward(preds, y)
            loss = ppo_loss(old_probs, probs, torch.tensor([reward]))

        scaler.scale(loss).backward()
        scaler.step(optimizer)
        scaler.update()
        optimizer.zero_grad()

        all_rewards.append(reward)
        final_preds = preds
        print(f"Epoch {epoch} | F1: {reward:.4f} | Loss: {loss.item():.4f}")


    return all_rewards, final_preds

# 主要訓練階段
if __name__ == "__main__":
    ray.init(ignore_reinit_error=True)
    X_scaled, y = load_data_partition(0)
    actor_net = SpatioTemporalActor(time_dim=X_scaled.shape[1], space_dim=X_scaled.shape[1])
    rewards, final_preds = train(actor_net, X_scaled, y, epochs=10)

    # 繪製 reward 曲線
    plt.plot(rewards)
    plt.title("F1-Score Reward Curve")
    plt.xlabel("Epoch")
    plt.ylabel("F1-Score")
    plt.grid(True)
    plt.savefig("reward_curve.png")
    plt.show()

    # 顯示最終 F1-score
    final_f1 = f1_score(y.numpy(), final_preds.numpy(), average='macro')
    print(f"\nFinal F1-Score: {final_f1:.4f}")

    # 可視化混淆矩陣
    cm = confusion_matrix(y.numpy(), final_preds.numpy())
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(cmap='Blues')
    plt.title("Final Confusion Matrix")
    plt.savefig("confusion_matrix.png")
    plt.show()  
